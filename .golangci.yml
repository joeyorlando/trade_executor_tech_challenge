issues:
  # By default golangci-lint ignores multiple errors from several linters,
  # such as golint, revive, errcheck, etc. This is highly opinionated so
  # we disable them from being ignored by default.
  exclude-use-default: false

  exclude-rules:
      # We're fine shadowing err since it's the standard way to name
      # returned errors
    - linters: [govet]
      text: 'shadow: declaration of "err"'
      # We're fine shadowing ctx since it's the standard way to name
      # the context
    - linters: [govet]
      text: 'shadow: declaration of "ctx"'
      # We don't require comments on everything in services
    - linters: [revive]
      text: 'exported: exported (type|method|function) (.+) should have comment or be unexported'
      # We don't require package docs, Currently not supported by owners for GO1.8 and higher see here https://github.com/golangci/golangci-lint/issues/2649
    - linters: [stylecheck]
      text: ST1000
      # Very long lines are ok if they're URLs
    - linters: [lll]
      source: https?://

    # we remove a few annoying things from our tests, because they
    # don't provide much beside complexity
    - path: _test\.go
      linters:
        - errcheck
        - funlen
        - gosec
        - govet
        - unparam

linters-settings:
  depguard:
    list-type: blacklist
    include-go-root: true
    packages:
      - gotest.tools/assert # use gotest.tools/v3/assert instead

  govet:
    enable-all: true
    disable:
      - fieldalignment # This is for memory optimization (struct alignment). It sometimes has a negative impact on code-quality.

linters:
  disable-all: true
  enable:
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - deadcode # Finds unused code
    - depguard # checks if package imports are in a list of acceptable packages
    - errcheck # Checks for unchecked errors
    - exhaustive # Check exhaustiveness of enum switch statements
    - funlen # Tool for detection of long functions
    - gochecknoinits # Checks that no init functions are present in Go code
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - gofmt # Gofmt checks whether code was gofmt-ed.
    - goimports # Reports invalid import order
    - gosec # Inspects source code for security problems
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Reports suspicious constructs, such as Printf calls whose arguments do not align with the format string, or shadowed variables.
    - ineffassign # Detects when assignments to existing variables are not used
    - lll # Reports long lines
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - prealloc # Finds slice declarations that could potentially be preallocated
    - predeclared # Find code that shadows one of Go's predeclared identifiers (new, int, case, etc.)
    - revive # Replacement for golint
    - exportloopref # Checks for unpinned variables in go programs. Enabled to detect variable capture in closures, see https://github.com/kyoh86/scopelint/issues/16
    - staticcheck # Applies a ton of static analysis checks
    - structcheck # Finds unused struct fields
    - stylecheck # Replacement for golint
    - tparallel # Finds improper usage of the t.Parallel() method in test code
    - typecheck # Parses and type-checks Go code
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - unused # Checks Go code for unused constants, variables, functions and types
    - varcheck # Finds unused global variables and constants
